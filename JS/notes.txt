JS BASICS

const - a keyword used to declare a variable that cannot be reassigned a new value.
let - a keyword used to declare a variable that can be reassigned a new value.
var(deprecated) - a keyword used to declare a variable that can be reassigned a new value.

primitive data types:
number => 2 to power 53
bigint => for large numbers
string => "hello"
boolean => true/false
null => standalone value
undefined => declared but not defined
symbol => unique

non-primitive data types:
object => {key: value}
array => [1, 2, 3, 4, 5]
function => function hello(){}

Operators:
Arithmetic operators: (+)~add (-)~subtract (*)~multiply (/)~divide (%)~modulus (++)~increment (--)~decrement
Assignment operators: (=)~equals (+=)~add and assign (-=)~subtract and assign (*=)~multiply and assign (/=)~divide and assign (%=)~modulus and assign
Comparison operators: (==)~equals to (===)~strictly equals to (!=)~not equals to (!==)~strictly not equals to (>)~greater than (<)~less than (>=)~greater than or equals to (<=)~less than or equals to
Logical operators: (&&)~and (||)~or (!)~not
Bitwise operators: (&)~and (|)~or (~)~not (^)~xor (<<)~left shift (>>)~right shift (>>>)~unsigned right shift

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Datatype Conversion:
- to number:
"33" => 33
"33abc" => NaN
"33.33" => 33.33
true => 1
false => 0
null => null
undefined => undefined
NaN => NaN

- to string:
33 => "33"
33.33 => "33.33"
true => "true"
false => "false"
null => "null"
undefined => "undefined"
NaN => "NaN"

- to boolean:
"" => false 
"0" => false
"false" => false
0 => false
false => false
NaN => false
undefined => false
null => false

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Comparison of Datatypes:
"2">1 => true
1>"2" => false
null>0 => false
null==0 => false
null>=0 => true


Stack(Primitive data types) => Last in First out (LIFO) =>gets a copy of the value
Heap(Non-primitive data types) => Key value pair =>gets the reference of the value

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

String :
string.length - get the length of the string
string.charAt(index) - get the character at the index
string[index] - get the character at the index
string.toUpperCase() - convert the string to uppercase
string.toLowerCase() - convert the string to lowercase
string.indexOf(substring) - get the index of the substring
string.substring(start, end) - get the substring from start to end
string.slice(start, end) - get the substring from start to end
string.replace(substring, newString) - replace the substring with newString
string.split(separator) - split the string by separator
string.trim() - trim the string

Number :
number.toString() - convert the number to string
number.toFixed(precision) - convert the decimal number to fixed precision
number.toPrecision(precision) - convert the decimal number to precision
number.toLocaleString('en-IN') - convert the number to locale string in en-IN
Math library :
Math.abs(num) - get the absolute value of the number
Math.round(num) - round the number to the nearest integer
Math.floor(num) - round the number down to the nearest integer
Math.ceil(num) - round the number up to the nearest integer
Math.sqrt(num) - get the square root of the number
Math.pow(num1, num2) - get the power of the number
Math.random() - get a random number between 0 and 1
    // random within range = Math.floor((Math.random()*(max-min+1))+min)
Math.max(num1, num2) - get the maximum of two numbers
Math.min(num1, num2) - get the minimum of two numbers

Number.max(num1, num2) - get the maximum of two numbers
Number.min(num1, num2) - get the minimum of two numbers

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Dates in JS :
let myDate = new Date();
myDate.getDate() - get the date
myDate.getMonth() - get the month
myDate.getFullYear() - get the year
myDate.getHours() - get the hours
myDate.getMinutes() - get the minutes
myDate.getSeconds() - get the seconds
myDate.toString() - convert the date to string
myDate.toLocaleString() - convert the date to locale string




DOM

document.getElementById("title") - get element by id

manipulation:
document.getElementById("title").innerHTML - gives the entire html tag value of the element
document.getElementById("title").innerText - change the content of the element
document.getElementById("title").textContent - return the text content of the element
document.getElementById("title").style.color - change the color of the element
document.getElementById("title").classList.remove("bg-black") - remove class from the element
document.getElementById("title").classList.add("bg-black") - add class to the element


document.querySelector("h2") - get single element by tag name
document.querySelectorAll("h2") - get multiple elements by tag name
        - this returns a `node` list
        - node list is like an array but it is not an array

        document.querySelectorAll("h2").style.color = "green" [error]
        document.querySelectorAll("h2")[0].style.color = "green" [correct]

        document.querySelectorAll("h2").forEach(function(element){
            element.style.color = "green"
        }) [correct]

document.getElemensByClassName("title") - get multiple elements by class name
        - this returns HTML collection (not an array)

convert nodelist into array:
Array.from(document.getElementsByClassName("title")) - get multiple elements by class name
    - this returns an array
    - this is the same as document.querySelectorAll("h2")

.document.querySelectorAll("h2").firstElementChild - get first child of the element
.document.querySelectorAll("h2").lastElementChild - get last child of the element
-firstElementChild
-lastElementChild
-childNodes
-parentNode
-nextElementSibling
-previousElementSibling

to create a new element in DOM :
div.setAttribute("id", "title") - set attribute
.createTextNode("hello") - create text node
.appendChild(textNode) - append child to the element
//create
.createElement("div") - create a new element
//edit
.replaceWith(newElement) - replace the element with new element
.outerHTML - get the html tag value of the element
//remove
.remove() - remove the element


OBJECTS:
to create an object:
    const obj = {};
    obj.name = "John";
    obj.age = 30;
to access the object:
    obj.name;
    obj["age"];
to add a new property:
    obj.fullName = "John Doe";
    to delete a property:
    delete obj.age;
to add a new function:
    obj.greeting = function() {
        console.log("hello");
    }
backticks are used to create a template string:
"String interpolation"
    const name = "John";
    const greeting = `hello ${name}`;
    console.log(greeting);
        //output: hello John

