JS BASICS

const - a keyword used to declare a variable that cannot be reassigned a new value.
let - a keyword used to declare a variable that can be reassigned a new value.
var(deprecated) - a keyword used to declare a variable that can be reassigned a new value.

primitive data types:
number => 2 to power 53
bigint => for large numbers
string => "hello"
boolean => true/false
null => standalone value
undefined => declared but not defined
symbol => unique

non-primitive data types:
object => {key: value}
array => [1, 2, 3, 4, 5]
function => function hello(){}

Operators:
Arithmetic operators: (+)~add (-)~subtract (*)~multiply (/)~divide (%)~modulus (++)~increment (--)~decrement
Assignment operators: (=)~equals (+=)~add and assign (-=)~subtract and assign (*=)~multiply and assign (/=)~divide and assign (%=)~modulus and assign
Comparison operators: (==)~equals to (===)~strictly equals to (!=)~not equals to (!==)~strictly not equals to (>)~greater than (<)~less than (>=)~greater than or equals to (<=)~less than or equals to
Logical operators: (&&)~and (||)~or (!)~not
Bitwise operators: (&)~and (|)~or (~)~not (^)~xor (<<)~left shift (>>)~right shift (>>>)~unsigned right shift

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Datatype Conversion:
- to number:
"33" => 33
"33abc" => NaN
"33.33" => 33.33
true => 1
false => 0
null => null
undefined => undefined
NaN => NaN

- to string:
33 => "33"
33.33 => "33.33"
true => "true"
false => "false"
null => "null"
undefined => "undefined"
NaN => "NaN"

- to boolean:
"" => false 
"0" => false
"false" => false
0 => false
false => false
NaN => false
undefined => false
null => false

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Comparison of Datatypes:
"2">1 => true
1>"2" => false
null>0 => false
null==0 => false
null>=0 => true


Stack(Primitive data types) => Last in First out (LIFO) =>gets a copy of the value
Heap(Non-primitive data types) => Key value pair =>gets the reference of the value


DOM

document.getElementById("title") - get element by id

manipulation:
document.getElementById("title").innerHTML - gives the entire html tag value of the element
document.getElementById("title").innerText - change the content of the element
document.getElementById("title").textContent - return the text content of the element
document.getElementById("title").style.color - change the color of the element
document.getElementById("title").classList.remove("bg-black") - remove class from the element
document.getElementById("title").classList.add("bg-black") - add class to the element

document.querySelector("h2") - get single element by tag name
document.querySelectorAll("h2") - get multiple elements by tag name
        - this returns a `node` list
        - node list is like an array but it is not an array

        document.querySelectorAll("h2").style.color = "green" [error]
        document.querySelectorAll("h2")[0].style.color = "green" [correct]

        document.querySelectorAll("h2").forEach(function(element){
            element.style.color = "green"
        }) [correct]

document.getElemensByClassName("title") - get multiple elements by class name
        - this returns HTML collection (not an array)

convert nodelist into array:
Array.from(document.getElementsByClassName("title")) - get multiple elements by class name
    - this returns an array
    - this is the same as document.querySelectorAll("h2")

.document.querySelectorAll("h2").firstElementChild - get first child of the element
.document.querySelectorAll("h2").lastElementChild - get last child of the element
-firstElementChild
-lastElementChild
-childNodes
-parentNode
-nextElementSibling
-previousElementSibling

to create a new element in DOM :
div.setAttribute("id", "title") - set attribute
.createTextNode("hello") - create text node
.appendChild(textNode) - append child to the element
//create
.createElement("div") - create a new element
//edit
.replaceWith(newElement) - replace the element with new element
.outerHTML - get the html tag value of the element
//remove
.remove() - remove the element